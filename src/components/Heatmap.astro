---
import { getCollection } from 'astro:content';
import getPostsByGroupCondition from "@utils/getPostsByGroupCondition";

// 获取博客文章
const posts = await getCollection("blog");
const today = new Date();
const daysToShow = 371; // 53 x 7
const startDate = new Date(today);
startDate.setDate(today.getDate() - daysToShow + 1);

// 动态生成月份标签
const monthLabels: string[] = []; // 显式定义类型为 string[]
let currentMonth = new Date(startDate);

while (currentMonth <= today) {
  const month = currentMonth.toLocaleString('default', { month: '2-digit' });
  // 如果月份标签为空，或者当前月份与上一个月份不同，则添加
  if (monthLabels.length === 0 || monthLabels[monthLabels.length - 1] !== month) {
    monthLabels.push(month);
  }
  // 移动到下个月
  currentMonth.setMonth(currentMonth.getMonth() + 1);
}

// 过滤出过去 371 天的文章
const filteredPosts = posts.filter(post => {
  const postDate = new Date(post.data.pubDatetime);
  return postDate >= startDate && postDate <= today;
});

// 按日期分组
const postsByDate = getPostsByGroupCondition(filteredPosts, (post) => {
  const date = post.data.pubDatetime;
  return date.toISOString().split('T')[0];
});

// 星期标签
const weekdays: string[] = ['一', '三', '五', '日']; // 显式定义类型为 string[]

// 生成 53 周的数据
const weeks: { date: string; count: number }[][] = []; // 显式定义类型
let currentWeek: { date: string; count: number }[] = []; // 显式定义类型
let current = new Date(startDate);

// 调整到最近的周日
while (current.getDay() !== 0) {
  current.setDate(current.getDate() - 1);
}

for (let i = 0; i < 53; i++) {
  currentWeek = [];
  for (let j = 0; j < 7; j++) {
    const dateStr = current.toISOString().split('T')[0];
    currentWeek.push({
      date: dateStr,
      count: postsByDate[dateStr]?.length || 0
    });
    current.setDate(current.getDate() + 1);
  }
  weeks.push(currentWeek);
}

// 计算最大文章数量
const maxCount = Math.max(...Object.values(postsByDate).map(posts => posts.length));

// 根据文章数量获取颜色
function getColor(count: number): string {
  if (count === 0) return "#ebedf0";
  const level = Math.ceil((count / maxCount) * 4);
  const colors = ["#ffd0b6", "#ffb088", "#ff935a", "#ff7525"];
  return colors[Math.min(level - 1, 3)];
}
---
<div class="relative flex flex-col w-full max-w-full gap-0.5 sm:gap-1">
  {/* 月份标签 */}
  <div class="grid sm:grid" style="grid-template-columns: 1.5rem repeat(12, 1fr); height: 1.5rem;">
    <div></div>
    {monthLabels.map((month, index) => (
      <div
        key={index}
        class="text-[0.65rem] text-gray-400 text-center"
        style={{ gridColumn: index + 2 }} // 动态调整列位置
      >
        {month}
      </div>
    ))}
  </div>

  {/* 星期标签和主网格 */}
  <div class="grid w-full" style="grid-template-columns: 1.5rem 1fr;">
    {/* 星期标签 */}
    <div class="flex flex-col justify-between h-[7rem]">
      {weekdays.map((day, index) => (
        <div key={index} class="text-[0.65rem] text-gray-400 text-center">
          {day}
        </div>
      ))}
    </div>

    {/* 主网格 */}
    <div class="grid w-full gap-[1px] sm:gap-1" style="grid-template-columns: repeat(53, 1fr);">
      {weeks.map((week, weekIndex) => (
        <div key={weekIndex} class="grid gap-[1px] sm:gap-1" style="grid-template-rows: repeat(7, 1fr);">
          {week.map((day, dayIndex) => (
            <div
              key={dayIndex}
              class="w-full h-[10px] sm:w-3 sm:h-3 rounded-none sm:rounded-sm"
              style={{ backgroundColor: getColor(day.count) }}
              title={`${day.date}: ${day.count} posts`}
            />
          ))}
        </div>
      ))}
    </div>
  </div>
</div>

